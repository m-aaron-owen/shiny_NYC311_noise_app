shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
setwd("~/Desktop/NYC Data Science Academy/Projects/shiny_NYC311_noise_app")
library(data.table)
library(dplyr)
library(ggplot2)
# noise_ = fread("Noise_Complaints.csv", stringsAsFactors = F)
noise_ = fread("noise_.csv", stringsAsFactors = F)
noise_ %>% filter(year == c("2013, 2014, 2015, 2016"))
noise_ %>% filter(start_year == c("2013, 2014, 2015, 2016"))
noise_ %>% filter(start_year == c("2013", "2014", "2015", "2016")
noise_ %>% filter(start_year == c("2013", "2014", "2015", "2016"))
noise_ %>% filter(start_year == c("2013", "2014", "2015", "2016"))
noise_ %>% filter(start_year == c("2010", "2011", "2012"))
noise_ %>% filter(start_year == "2010")
noise_ %>% filter(start_year == "2013" | start_year == "2014" | start_year == "2015" | start_year == "2016")
noise_ %>% filter(start_year == "2014" | start_year == "2015" | start_year == "2016")
noise2 = noise_ %>% filter(start_year == "2014" | start_year == "2015" | start_year == "2016")
read.csv(noise2, "noise2.csv")
write.csv(noise2, "noise2.csv", row.names = F)
shiny::runApp()
runApp()
x = sample(100, 1:100, replace = T)
y = sample(100, 1:10, replace = T)
x
y
y
x = sample(1:100, 100, replace = T)
y = sample(1:10, 100, replace = T)
x
y
new_x = (x - mean(x)) / sd(x)
new_x
x
new_x2 = (x - min(x))/ (max(x) - min(x))
x
new_x
new_x2
mean(new_x2)
mean(new_x)
mean(new_x)
new_x
mean(new_x)
new_x
sum(new_x)
new_x[1]
x = sample(1:100, 10, replace = T)
y = sample(1:10, 10, replace = T)
new_x = (x - mean(x)) / sd(x)
new_x2 = (x - min(x))/ (max(x) - min(x))
mean(new_x)
mean(new_x2)
new_x[1]
new_x
sum(new_x[1])
mean(new_x)
sum(new_x[1])
new_x
mean(new_x)
new_x
mean(c(0.24, 1.14, -1.22, -0.66, -1.19, 1.26, 0.08, -1.1, 1.05, 0.3))
sum(new_x[1])
mean(new_x)
mean(new_x2)
new_x
x = sample(1:100, 100, replace = T)
y = sample(1:10, 100, replace = T)
new_x = (x - mean(x)) / sd(x) # makes the mean be zero
new_x2 = (x - min(x))/ (max(x) - min(x)) #
new_x
x = sample(1:100, 10000, replace = T)
new_x = (x - mean(x)) / sd(x) # makes the mean be zero
new_x2 = (x - min(x))/ (max(x) - min(x)) #
new_x
range(new_x)
x = sample(1:1000, 100, replace = T)
new_x = (x - mean(x)) / sd(x) # makes the mean be zero
new_x2 = (x - min(x))/ (max(x) - min(x)) #
range(new_x)
x = sample(1:1000000, 100, replace = T)
new_x = (x - mean(x)) / sd(x) # makes the mean be zero
new_x2 = (x - min(x))/ (max(x) - min(x)) #
range(new_x)
mean(new_x)
range(new_x)
runApp()
runApp()
runApp()
setwd("~/Desktop/NYC Data Science Academy/Projects/shiny_NYC311_noise_app")
noise2 = noise_ %>% filter(start_year == "2015" | start_year == "2016")
write.csv(noise2, "noise2.csv", row.names = F)
runApp()
noise2 = NULL
runApp()
x = noise_ %>% filter(year == "2013")
x = noise_ %>% filter(year == "2013")
x = noise_ %>% filter(year == "2013")
noise_ %>% filter(year == "2013")
noise_
x = noise_ %>% filter(start_year == "2013")
x
noise_ %>% group_by(start_year) %>% summarise(count = n())
noise_ %>% group_by(start_year) %>% summarise(count = n()/2030682)
noise_ %>% group_by(start_year) %>% summarise(count = n()/2030682 * 100)
500000 * .21
x = 500000
x * c(20.6, 19.9, 16.6, 12.7, 11.2, 10, 9.9)
sum(c(20.6, 19.9, 16.6, 12.7, 11.2, 10, 9.9))
x * c(20.6, 19.9, 16.6, 12.7, 11.2, 10, 9.9)
x * c(.206, .199, .166, .127, .112, .10, .99)
sum(x * c(.206, .199, .166, .127, .112, .10, .99))
sum(x * c(.206, .199, .166, .127, .112, .10, .99))
sum(x * c(.206, .199, .166, .127, .112, .10, .09))
500000
sum(x * c(.206, .199, .166, .127, .112, .10, .09)) == 500000
x * c(.206, .199, .166, .127, .112, .10, .09)
noise_ %>% group_by(start_year) %>% summarise(count = n())
rows_2016 = sample(103000, 417762, replace = F)
rows_2016 = sample(417762, 103000, replace = F)
length(rows_2016)
noise_[rows_2016, ]
noise_[noise_$start_year == "2016"][rows_2016, ]
rows_2016 = sample(417762, 103000, replace = F)
rows_2015 = sample(384555, 99500, replace = F)
rows_2014 = sample(337160, 83000, replace = F)
rows_2013 = sample(258329, 63500, replace = F)
rows_2012 = sample(228165, 56000, replace = F)
rows_2011 = sample(203369, 50000, replace = F)
rows_2010 = sample(201342, 45000, replace = F)
noise_2016 = noise_[noise_$start_year == "2016"][rows_2016, ]
noise_2015 = noise_[noise_$start_year == "2015"][rows_2015, ]
noise_2014 = noise_[noise_$start_year == "2014"][rows_2014, ]
noise_2013 = noise_[noise_$start_year == "2013"][rows_2013, ]
noise_2012 = noise_[noise_$start_year == "2012"][rows_2012, ]
noise_2011 = noise_[noise_$start_year == "2011"][rows_2011, ]
noise_2010 = noise_[noise_$start_year == "2010"][rows_2010, ]
cbind(noise_2010, noise_2011)
rbind(noise_2010, noise_2011)
rbind(rbind(noise_2010, noise_2011), noise_2012)
rbind(noise_2012, rbind(noise_2010, noise_2011))
rbind(noise_2016, rbind(noise_2015, rbind(noise_2014, rbind(noise_2013, rbind(noise_2012, rbind(noise_2010, noise_2011))))))
rbind(noise_2016, rbind(noise_2015, rbind(noise_2014, rbind(noise_2013, rbind(noise_2012, rbind(noise_2010, noise_2011)))))) %>% group_by(start_year)
rbind(noise_2016, rbind(noise_2015, rbind(noise_2014, rbind(noise_2013, rbind(noise_2012, rbind(noise_2010, noise_2011)))))) %>% group_by(start_year) %>% summarise(count = n())
rbind(noise_2016, rbind(noise_2015, rbind(noise_2014, rbind(noise_2013, rbind(noise_2012, rbind(noise_2010, noise_2011))))))
noise2 = rbind(noise_2016, rbind(noise_2015, rbind(noise_2014, rbind(noise_2013, rbind(noise_2012, rbind(noise_2010, noise_2011))))))
write.csv(noise2, "noise2.csv", row.names = F)
noise = NULL
runApp()
runApp()
runApp()
shiny::runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
profs
profs[, "department"]
profs[, department == c("English, Business")]
profs[, profs$department == c("English, Business")]
profs[, profs$department == c("English, Business")]
profs[profs$department == c("English, Business")]
profs
profs[profs$department == "English"]
profs[, profs$department == "English"]
profs[profs$department == "English", ]
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
profs[profs$department == c("English", "Business"), ]
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
profs[profs$department == c("Business"), ]
profs[profs$department == c("Biology"), ]
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
profs[profs$department %in% c("Biology", "Chemistry"), ]
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
profs[profs$department %in% c("Art"), ]
profs[profs$department %in% c("Art", "Biology"), ]
profs[c("Art", "Biology") %in% profs$department, ]
profs[profs$department %in% c("Art", "Biology"), ]
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp()
runApp()
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp()
shiny::runApp()
## read in the data
library(ggplot2)
library(dplyr)
profs = read.csv("profs.csv", stringsAsFactors = F)
profs = profs %>% select(-X, -X.1)
head(profs)
# concatenate similar departments
profs$department[grepl("Biological", profs$department)] = "Biology"
profs$department[grepl("Business Te", profs$department)] = "Business"
profs[profs$department == "Science", ]$department = "Physical Sciences"
profs$department[grepl("Theater|Speech", profs$department)] = "Communication"
profs[profs$name == "Greco, Joseph", ]$department = "Communication"
profs[profs$name == "Sokolski, Patricia", ]$department = "Communication"
profs$department[grepl("Allied", profs$department)] = "Health Science"
profs$department[grepl("Health & Physical Education|Physical Education", profs$department)] = "Physical Ed"
profs$department[grepl("Art", profs$department)] = "Art"
profs$department[grepl("Legal", profs$department)] = "Law"
profs$department[grepl("African|Ethnic|Women", profs$department)] = "Cultural Studies"
profs$department[grepl("Foreign|Spanish", profs$department)] = "Languages"
profs$department[grepl("Info", profs$department)] = "Social Science"
profs[profs$name == "Townsend, Charles", ]$department = "Social Science"
profs[profs$name == "Ruiz, Roberto", ]$department = "Philosophy"
profs$department[grepl("History|Political|Philosophy", profs$department)] = "History, Philosophy, Poly Sci"
profs = profs %>% mutate(chili = ifelse(grepl("True", chili), "attractive", "not attractive"))
# enumerate total tags for each each row
profs["total_tags"] = apply(profs[10:29], 1, sum, na.rm = T)
# rename schools
profs[profs$school == "qns", ]$school = "Queensboro CC"
profs[profs$school == "king", ]$school = "Kingsboro CC"
profs[profs$school == "nas", ]$school = "Nassau CC"
profs[profs$school == "lg", ]$school = "LaGuardia CC"
profs[profs$school == "man", ]$school = "Borough of Manhattan CC"
# aggregating tag proportions
grouped_profs =
profs %>% group_by(name, school, sex, department) %>%
summarise_if(is.numeric, mean, na.rm = T) %>%
mutate(
`Accessible Outside of Class` = accessible.outside.class/total_tags * 100,
`Amazing Lectures` = amazing.lectures/total_tags * 100,
`Beware of Pop Quizzes` = beware.of.pop.quizzes/total_tags * 100,
Caring = caring/total_tags * 100,
`Clear Grading Criteria` = clear.grading.criteria/total_tags * 100,
`Extra Credit` = extra.credit/total_tags * 100,
`Get Ready to Read` = get.ready.to.read/total_tags * 100,
`Gives Good Feedback` = gives.good.feedback/total_tags * 100,
`Graded by Few Things` = graded.by.few.things/total_tags * 100,
`Group Projects` = group.projects/total_tags * 100,
Hilarious = hilarious/total_tags * 100,
Inspirational = inspirational/total_tags * 100,
`Lecture Heavy` = lecture.heavy/total_tags * 100,
`Lots of Homework` = lots.of.homework/total_tags * 100,
`Participation Matters` = participation.matters/total_tags * 100,
Respected = respected/total_tags * 100,
`Skip Class You won't Pass` = skip.class.you.wont.pass/total_tags * 100,
`So Many Papers` = so.many.papers/total_tags * 100,
`Test Heavy` = test.heavy/total_tags * 100,
`Tough Grader` = tough.grader/total_tags * 100)
grouped_profs = grouped_profs %>% rename(overall_score_mean = overall_score, difficulty_score_mean = difficulty_score)
profs = merge(profs, grouped_profs[, -(5:27)], by = c("name"), suffixes = c("", "_y")) %>%
select(-school_y, -sex_y, -department_y)
profs %>% filter(chili == "not attractive") %>%
ggplot(aes(x = difficulty_score, y = overall_score)) + geom_point(position = "jitter") +
geom_smooth(aes(color = sex), method = "lm", se = F)
profs %>% filter(sex == "female") %>%
ggplot(aes(x = difficulty_score, y = overall_score)) + geom_point(position = "jitter") +
#geom_smooth(aes(color = sex), method = "lm", se = F) +
geom_smooth(aes(color = chili), method = "lm", se = F)
profs %>% ggplot(aes(x = difficulty_score, y = overall_score)) + geom_point(position = "jitter") +
geom_smooth(aes(color = chili), method = "lm", se = F) +
geom_smooth(aes(color = sex), method = "lm", se = F)
profs %>% ggplot(aes(x = difficulty_score, y = overall_score)) + geom_point(position = "jitter") +
geom_smooth(aes(color = chili), method = "lm", se = F) +
geom_smooth(aes(color = sex), method = "lm", se = F)
profs %>% ggplot(aes(x = difficulty_score, y = overall_score)) + geom_point(position = "jitter") +
geom_smooth(aes(color = chili), method = "lm", se = F)
profs %>% ggplot(aes(x = difficulty_score, y = overall_score)) + geom_point(position = "jitter") +
geom_smooth(aes(color = sex), method = "lm", se = F)
m = data.frame(x = 1:10, y = 1:10)
ggplot(m, aes(x = x, y = y)) +
annotate("text", x = 5, y = 5, label = "Department Not at College", size = 3) +
theme_void() + ggtitle("Hi") + theme(plot.title = element_text(hjust = 0.5))
m = data.frame(x = 1:10, y = 1:10)
ggplot(m, aes(x = x, y = y)) +
annotate("text", x = 5, y = 5, label = "Department Not at College", size = 3) +
theme_void() + ggtitle("Hi") + theme(plot.title = element_text(hjust = 0.5))
ggplot(m, aes(x = x, y = y)) +
annotate("text", x = 5, y = 5, label = "Department Not at College", size = 10) +
theme_void() + ggtitle("Hi") + theme(plot.title = element_text(hjust = 0.5))
profs %>% ggplot(aes(x = difficulty_score, y = overall_score)) + geom_point(position = "jitter", show.legend = F) +
geom_smooth(aes(color = chili), method = "lm", se = F) +
geom_smooth(aes(color = sex), method = "lm", se = F)
profs %>% ggplot(aes(x = difficulty_score, y = overall_score)) + geom_point(position = "jitter", show.legend = F) +
geom_smooth(aes(color = chili), method = "lm", se = F, show.legend = F) +
geom_smooth(aes(color = sex), method = "lm", se = F, show.legend = F)
profs %>% ggplot(aes(x = difficulty_score, y = overall_score)) + geom_point(position = "jitter", show.legend = F) +
geom_smooth(aes(color = chili), method = "lm", se = F, show.legend = F)
profs %>% ggplot(aes(x = difficulty_score, y = overall_score)) + geom_point(position = "jitter", show.legend = F) +
geom_smooth(aes(color = sex), method = "lm", se = F, show.legend = F)
grouped_profs[, -(5:27)]
shiny::runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
View(m)
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
summary(lm(profs$overall_score ~ profs$difficulty_score + profs$sex + profs$chili))
##
abc = profs %>% filter(department == "Chemistry") %>% group_by(school) %>% summarise(overall = mean(overall_score), diff = mean(difficulty_score))
xyz = tidyr::gather(abc,rating, score, -school)
ggplot(xyz, aes(x = school, y = score, fill = rating)) + geom_bar(stat = "identity", position = "dodge")
# ggplot(y, aes(x = Complaint.Type2, y = count, fill = Complaint.Type2)) + geom_bar(stat = "identity") + coord_flip()
df = grouped_profs %>% select("Tough Grader", "department", "school") %>%
filter(department == "English") %>%
group_by(school)
df = grouped_profs %>% select(`Tough Grader`, "department", "school") %>%
filter(department == "English") %>%
group_by(school)
grouped_profs
df = grouped_profs %>% select("Tough.Grader", "department", "school") %>%
filter(department == "English") %>%
group_by(school)
ggplot(df, aes_string(x = "school", y = input$tags, fill = "school")) +
geom_bar(stat = "identity", show.legend = F)
df = grouped_profs %>% select("Tough.Grader", "department", "school") %>%
filter(department == "English") %>%
group_by(school)
ggplot(df, aes_string(x = "school", y = "Tough.Grader", fill = "school")) +
geom_bar(stat = "identity", show.legend = F)
profs %>% ggplot(aes(x = difficulty_score, y = overall_score)) + geom_point(position = "jitter") +
geom_smooth(aes(color = chili), method = "lm", se = F, show.legend = F) +
geom_smooth(aes(color = sex), method = "lm", se = F, show.legend = F)
runApp('~/Desktop/NYC Data Science Academy/Projects/rate_my_prof_web_scrape/RMP')
